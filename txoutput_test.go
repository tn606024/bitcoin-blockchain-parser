package main

import (
	"bytes"
	"testing"
)

var TxOutputTestBytes = []byte{
	0x00,0xf2,0x05,0x2a,0x01,0x00,0x00,0x00,
	0x43,0x41,0x04,0x96,0xb5,0x38,0xe8,0x53,
	0x51,0x9c,0x72,0x6a,0x2c,0x91,0xe6,0x1e,
	0xc1,0x16,0x00,0xae,0x13,0x90,0x81,0x3a,
	0x62,0x7c,0x66,0xfb,0x8b,0xe7,0x94,0x7b,
	0xe6,0x3c,0x52,0xda,0x75,0x89,0x37,0x95,
	0x15,0xd4,0xe0,0xa6,0x04,0xf8,0x14,0x17,
	0x81,0xe6,0x22,0x94,0x72,0x11,0x66,0xbf,
	0x62,0x1e,0x73,0xa8,0x2c,0xbf,0x23,0x42,
	0xc8,0x58,0xee,0xac,}



var TxOutputTest = &TxOutput{
	Value: 5000000000,
	PkScriptBytes: 67,
	PkScript: &PKScript{
	PkScript:  []byte{
		0x41,0x04,0x96,0xb5,0x38,0xe8,0x53,0x51,
		0x9c,0x72,0x6a,0x2c,0x91,0xe6,0x1e,0xc1,
		0x16,0x00,0xae,0x13,0x90,0x81,0x3a,0x62,
		0x7c,0x66,0xfb,0x8b,0xe7,0x94,0x7b,0xe6,
		0x3c,0x52,0xda,0x75,0x89,0x37,0x95,0x15,
		0xd4,0xe0,0xa6,0x04,0xf8,0x14,0x17,0x81,
		0xe6,0x22,0x94,0x72,0x11,0x66,0xbf,0x62,
		0x1e,0x73,0xa8,0x2c,0xbf,0x23,0x42,0xc8,
		0x58,0xee,0xac,
	},
	Pops: []*parsedOpcode{
		{
			Opcode: &opcodeArray[OP_DATA_65],
			Data: []byte{
				0x04,0x96,0xb5,0x38,0xe8,0x53,0x51,0x9c,
				0x72,0x6a,0x2c,0x91,0xe6,0x1e,0xc1,0x16,
				0x00,0xae,0x13,0x90,0x81,0x3a,0x62,0x7c,
				0x66,0xfb,0x8b,0xe7,0x94,0x7b,0xe6,0x3c,
				0x52,0xda,0x75,0x89,0x37,0x95,0x15,0xd4,
				0xe0,0xa6,0x04,0xf8,0x14,0x17,0x81,0xe6,
				0x22,0x94,0x72,0x11,0x66,0xbf,0x62,0x1e,
				0x73,0xa8,0x2c,0xbf,0x23,0x42,0xc8,0x58,
				0xee,
				},
		},
		{
			Opcode: &opcodeArray[OP_CHECKSIG],
			Data: []byte{},
		},
	},
	Stype: PubKey,
	Addresses: []string{"12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX"},
	},
}

func TestDeserializeTxOut(t *testing.T) {
	txout, size, err := DeserializeTxOut(TxOutputTestBytes, &MainnetParams)
	if err != nil {
		t.Errorf("TestDeserializeTxOut error: %s", err)
	}
	if size != len(TxOutputTestBytes) {
		t.Errorf("size is not correct, we got: %d, but answer is: %d",size, len(TxOutputTestBytes))
	}
	CompareTxOutput(txout, TxOutputTest,t)
}

func CompareTxOutput(got *TxOutput, ans *TxOutput, t *testing.T){
	if got.PkScriptBytes != ans.PkScriptBytes {
		t.Errorf("pkScriptBytes is not correct, we got:%d, but answer is:%d", got.PkScriptBytes, ans.PkScriptBytes)
	}
	if got.Value != ans.Value {
		t.Errorf("value is not correct, we got: %d, but answer is: %d", got.Value, ans.Value)
	}
	ComparePKScript(got.PkScript, ans.PkScript, t)
}

func TestTxOutput_Serialize(t *testing.T) {
	b, err := TxOutputTest.Serialize()
	if err != nil {
		t.Errorf("TestTxOutput_Serialize error: %s", err)
	}
	if  bytes.Compare(b, TxOutputTestBytes) != 0 {
		t.Errorf("Serialize bytes are not correct, we got: %x, but answer is: %x", b, TxOutputTestBytes)
	}
}