package main

import (
	"bytes"
	"testing"
)

var (
	p2wpkhWitnessTestBytes = []byte{
		0x02,0x48,0x30,0x45,0x02,0x21,0x00,0xce,
		0x94,0x6d,0x85,0x63,0x0e,0x5d,0x4b,0xb2,
		0x27,0xf6,0x96,0x78,0xfa,0xff,0x2d,0x39,
		0x7a,0xdb,0x25,0x61,0x7c,0xc9,0xb4,0xa5,
		0x32,0x3f,0x4b,0x76,0x01,0x21,0xe8,0x02,
		0x20,0x4d,0x05,0x0a,0x9c,0x08,0x83,0x30,
		0xf2,0x36,0xae,0xc8,0x80,0x75,0xde,0x5c,
		0xa6,0x31,0xa5,0xb7,0xa3,0xae,0xa6,0x92,
		0x37,0x1d,0x0f,0x99,0xc9,0x62,0xd7,0x8d,
		0x85,0x01,0x21,0x03,0x2c,0xc6,0x3e,0xba,
		0x4d,0x1f,0x35,0xb6,0x38,0xe7,0x36,0x86,
		0xf7,0x68,0xc2,0xc9,0x63,0x99,0xe6,0x9d,
		0xc7,0x3f,0xcc,0x39,0xfe,0x30,0xb5,0x43,
		0xed,0x85,0x9c,0x19,
	}

    p2wpkhWitnessTest =  &Witness{
		WitnessStackCount: 2,
		WitnessScript:     []*WitnessScript{
			{
				WitnessScriptBytes: 72,
				WitnessScript: []byte{
					0x30,0x45,0x02,0x21,0x00,0xce,0x94,0x6d,
					0x85,0x63,0x0e,0x5d,0x4b,0xb2,0x27,0xf6,
					0x96,0x78,0xfa,0xff,0x2d,0x39,0x7a,0xdb,
					0x25,0x61,0x7c,0xc9,0xb4,0xa5,0x32,0x3f,
					0x4b,0x76,0x01,0x21,0xe8,0x02,0x20,0x4d,
					0x05,0x0a,0x9c,0x08,0x83,0x30,0xf2,0x36,
					0xae,0xc8,0x80,0x75,0xde,0x5c,0xa6,0x31,
					0xa5,0xb7,0xa3,0xae,0xa6,0x92,0x37,0x1d,
					0x0f,0x99,0xc9,0x62,0xd7,0x8d,0x85,0x01,
				},
			},
			{
				WitnessScriptBytes: 33,
				WitnessScript: []byte{
					0x03,0x2c,0xc6,0x3e,0xba,0x4d,0x1f,0x35,
					0xb6,0x38,0xe7,0x36,0x86,0xf7,0x68,0xc2,
					0xc9,0x63,0x99,0xe6,0x9d,0xc7,0x3f,0xcc,
					0x39,0xfe,0x30,0xb5,0x43,0xed,0x85,0x9c,
					0x19,
				},
			},
		},
	}

	p2wshWitnessTestBytes = []byte{
		0x04,0x00,0x47,0x30,0x44,0x02,0x20,0x52,
		0x08,0x46,0xd1,0x6c,0xdf,0x18,0x82,0x01,
		0xc2,0x72,0x8b,0x88,0xcc,0x6f,0x7d,0xf3,
		0x57,0x5e,0xe8,0xb9,0xb7,0x14,0xb5,0x38,
		0x51,0x80,0x06,0x70,0xe7,0x73,0x6c,0x02,
		0x20,0x1c,0xed,0x57,0x36,0xb8,0xa7,0xd8,
		0x3c,0x1f,0xe1,0x59,0x9e,0x54,0x36,0x5d,
		0xeb,0x76,0x76,0x8e,0x63,0xec,0xb7,0x9b,
		0xea,0xb7,0xcd,0xcc,0x6c,0x24,0x1a,0xdb,
		0x24,0x01,0x47,0x30,0x44,0x02,0x20,0x7a,
		0x63,0x8b,0x4e,0xab,0x62,0x03,0x34,0x9e,
		0x5d,0x52,0x92,0x56,0x80,0xac,0xd4,0x67,
		0x5a,0xf8,0x72,0x39,0xe1,0x88,0xfd,0x7b,
		0xf7,0xd7,0x5a,0xb7,0x26,0x80,0x7d,0x02,
		0x20,0x25,0x55,0x07,0xa5,0x4f,0xbb,0xc7,
		0x52,0xdd,0x10,0xdb,0x11,0x04,0x20,0x46,
		0xe5,0xc2,0xdd,0xeb,0x78,0x86,0xa2,0x95,
		0x47,0x4d,0xe1,0xe1,0x00,0xe0,0x9b,0x76,
		0x35,0x01,0x69,0x52,0x21,0x02,0x66,0xed,
		0xd4,0xef,0x29,0x53,0x67,0x5f,0xaf,0x06,
		0x62,0xc0,0x88,0xa7,0xf6,0x20,0x93,0x58,
		0x07,0xd2,0x00,0xd6,0x53,0x87,0x29,0x0b,
		0x31,0x64,0x8e,0x51,0xe2,0x53,0x21,0x03,
		0x72,0xce,0x38,0x02,0x7e,0xe9,0x5c,0x98,
		0xcd,0xc5,0x41,0x72,0x96,0x4f,0xa3,0xae,
		0xcf,0x9f,0x24,0xb8,0x5c,0x13,0x9d,0x3d,
		0x20,0x33,0x65,0xd6,0xb6,0x91,0xd0,0x50,
		0x21,0x03,0xc9,0x6d,0x49,0x5b,0xfd,0xd5,
		0xba,0x41,0x45,0xe3,0xe0,0x46,0xfe,0xe4,
		0x5e,0x84,0xa8,0xa4,0x8a,0xd0,0x5b,0xd8,
		0xdb,0xb3,0x95,0xc0,0x11,0xa3,0x2c,0xf9,
		0xf8,0x80,0x53,0xae,
	}


	p2wshWitnessTest = &Witness{
		WitnessStackCount: 4,
		WitnessScript: []*WitnessScript{
			{
				WitnessScriptBytes: 0,
				WitnessScript: nil,
			},
			{
				WitnessScriptBytes: 71,
				WitnessScript: []byte{
					0x30,0x44,0x02,0x20,0x52,0x08,0x46,0xd1,
					0x6c,0xdf,0x18,0x82,0x01,0xc2,0x72,0x8b,
					0x88,0xcc,0x6f,0x7d,0xf3,0x57,0x5e,0xe8,
					0xb9,0xb7,0x14,0xb5,0x38,0x51,0x80,0x06,
					0x70,0xe7,0x73,0x6c,0x02,0x20,0x1c,0xed,
					0x57,0x36,0xb8,0xa7,0xd8,0x3c,0x1f,0xe1,
					0x59,0x9e,0x54,0x36,0x5d,0xeb,0x76,0x76,
					0x8e,0x63,0xec,0xb7,0x9b,0xea,0xb7,0xcd,
					0xcc,0x6c,0x24,0x1a,0xdb,0x24,0x01,
				},

			},
			{
				WitnessScriptBytes: 71,
				WitnessScript: []byte{
					0x30,0x44,0x02,0x20,0x7a,0x63,0x8b,0x4e,
					0xab,0x62,0x03,0x34,0x9e,0x5d,0x52,0x92,
					0x56,0x80,0xac,0xd4,0x67,0x5a,0xf8,0x72,
					0x39,0xe1,0x88,0xfd,0x7b,0xf7,0xd7,0x5a,
					0xb7,0x26,0x80,0x7d,0x02,0x20,0x25,0x55,
					0x07,0xa5,0x4f,0xbb,0xc7,0x52,0xdd,0x10,
					0xdb,0x11,0x04,0x20,0x46,0xe5,0xc2,0xdd,
					0xeb,0x78,0x86,0xa2,0x95,0x47,0x4d,0xe1,
					0xe1,0x00,0xe0,0x9b,0x76,0x35,0x01,
				},
			},
			{
				WitnessScriptBytes:105,
				WitnessScript:[]byte{
					0x52,0x21,0x02,0x66,0xed,0xd4,0xef,0x29,
					0x53,0x67,0x5f,0xaf,0x06,0x62,0xc0,0x88,
					0xa7,0xf6,0x20,0x93,0x58,0x07,0xd2,0x00,
					0xd6,0x53,0x87,0x29,0x0b,0x31,0x64,0x8e,
					0x51,0xe2,0x53,0x21,0x03,0x72,0xce,0x38,
					0x02,0x7e,0xe9,0x5c,0x98,0xcd,0xc5,0x41,
					0x72,0x96,0x4f,0xa3,0xae,0xcf,0x9f,0x24,
					0xb8,0x5c,0x13,0x9d,0x3d,0x20,0x33,0x65,
					0xd6,0xb6,0x91,0xd0,0x50,0x21,0x03,0xc9,
					0x6d,0x49,0x5b,0xfd,0xd5,0xba,0x41,0x45,
					0xe3,0xe0,0x46,0xfe,0xe4,0x5e,0x84,0xa8,
					0xa4,0x8a,0xd0,0x5b,0xd8,0xdb,0xb3,0x95,
					0xc0,0x11,0xa3,0x2c,0xf9,0xf8,0x80,0x53,
					0xae,
				},

			},

		},
	}
)



func TestDeserializeWitness(t *testing.T) {
	//p2wpkh
	witness, size, err := DeserializeWitness(p2wpkhWitnessTestBytes, &MainnetParams)
	if err != nil {
		t.Errorf("TestDeserializeWitness error: %s", err)
	}
	if size != len(p2wpkhWitnessTestBytes) {
		t.Errorf("size is not correct: we got:%d, but answer is:%d", size, len(p2wpkhWitnessTestBytes))
	}
	CompareWitness(witness, p2wpkhWitnessTest,t)

	//p2wsh
	witness, size, err = DeserializeWitness(p2wshWitnessTestBytes, &MainnetParams)
	if err != nil {
		t.Errorf("TestDeserializeWitness error: %s", err)
	}
	if size != len(p2wshWitnessTestBytes) {
		t.Errorf("size is not correct: we got: %d, but answer is: %d", size, len(p2wshWitnessTestBytes))
	}
	CompareWitness(witness, p2wshWitnessTest,t)
}

func TestWitness_Serialize(t *testing.T) {
	//p2wpkh
	sp2wpkh, err := p2wpkhWitnessTest.Serialize()
	if err != nil {
		t.Errorf("TestWitness_Serialize error: %s", err)
	}
	if bytes.Compare(sp2wpkh,p2wpkhWitnessTestBytes) != 0 {
		t.Errorf("bytes are not correct: we got: %x, but answer is: %x", sp2wpkh, p2wpkhWitnessTestBytes)
	}

	//p2wsh
	sp2wsh, err := p2wshWitnessTest.Serialize()
	if err != nil {
		t.Errorf("TestWitness_Serialize error: %s", err)
	}
	if bytes.Compare(sp2wsh,p2wshWitnessTestBytes) != 0 {
		t.Errorf("bytes are not correct: we got: %x, but answer is: %x", sp2wsh, p2wshWitnessTestBytes)
	}
}

func CompareWitness(got *Witness, ans *Witness, t *testing.T){
	if got.WitnessStackCount != ans.WitnessStackCount {
		t.Errorf("witnessStackCount is not correct: we got:%d, but answer is:%d", got.WitnessStackCount, ans.WitnessStackCount)
	}
	for i , ws := range got.WitnessScript {
		if ws.WitnessScriptBytes != ans.WitnessScript[i].WitnessScriptBytes {
			t.Errorf(" %d's witnessScriptBytes is not correct: we got:%d, but answer is:%d",i,ws.WitnessScriptBytes,ans.WitnessScript[i].WitnessScriptBytes)
		}
		if bytes.Compare(ws.WitnessScript, ans.WitnessScript[i].WitnessScript) != 0{
			t.Errorf(" %d's witnessScript is not correct: we got:%x, but answer is:%x",i,ws.WitnessScript,ans.WitnessScript[i].WitnessScript)
		}
	}
}