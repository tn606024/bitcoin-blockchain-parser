package main

import (
	"path/filepath"
	"testing"
)

var testPath = "./test-data/index"

var testIndexDBData = []struct{
	hash []byte
	index *BlockIndex
}{
	{
		hash: []byte{
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32,
			0x2c, 0xee, 0x8a, 0x77, 0x4b, 0x3b, 0xc5, 0x0b,
			0xd3, 0x04, 0xf9, 0x2e, 0xe6, 0x3a, 0x7d, 0x8c,
			0x7c, 0x01, 0xbc, 0x9e, 0x71, 0xf1, 0x82, 0xae,
		},
		index: 	&BlockIndex{
			Height: 131301,
			Status: 29,
			Txs: 103,
			File: 2,
			DataPos: 8,
			UndoPos: 265294,
			BlockHeader: &BlockHeader{
				Version: 1,
				PrevBlockHeaderHash: []byte{
					0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x8e,
					0x02,0xcf,0xb5,0xb9,0xdf,0x13,0x04,0x96,
					0xb8,0x76,0xef,0x16,0x66,0xd4,0x8b,0xe1,
					0x22,0x16,0xbd,0x3e,0x47,0xea,0xc9,0x40,
				},
				MerkleRootHash: []byte{
					0x22,0x55,0x99,0xdd,0xc5,0xe0,0x1f,0xa2,
					0x6f,0x6e,0x75,0xb7,0x09,0xf0,0x75,0xa4,
					0x22,0x4b,0xe4,0xa0,0x11,0xeb,0xa1,0x35,
					0xdd,0x96,0xd2,0x84,0xd6,0xba,0xeb,0xe8,
				},
				Time: 1308256199,
				NBits: 437461381,
				Nonce: 2752901411,
			},
		},
	},
	{
		hash: []byte{
			0x00,0x00,0x00,0x00,0x00,0x00,0x0c,0xaf,
			0xdf,0x2f,0x34,0x30,0x37,0x7a,0xf5,0x89,
			0x55,0xcd,0x4c,0x0d,0xba,0x2e,0xce,0xcd,
			0xb2,0xa9,0x6e,0x2d,0x19,0xee,0x51,0x91,
		},
		index:	&BlockIndex{
			Height:  131079,
			Status:  29,
			Txs:     101,
			File:    2,
			DataPos: 53736,
			UndoPos: 8,
			BlockHeader: &BlockHeader{
				Version:             1,
				PrevBlockHeaderHash: []byte{
					0x00,0x00,0x00,0x00,0x00,0x00,0x09,0x2c,
					0xb4,0x54,0x27,0x94,0xb6,0x40,0x05,0x85,
					0xf9,0x7b,0xdb,0x6b,0xd7,0xda,0xbe,0xeb,
					0x4e,0xf6,0xb0,0x0a,0x85,0xb3,0x56,0xf1,
				},
				MerkleRootHash:      []byte{
					0x7b,0x60,0xe3,0x85,0xc5,0x66,0xa3,0xc0,
					0x34,0x32,0xea,0xec,0xed,0xd8,0x16,0x53,
					0x0e,0x1a,0x3e,0xb5,0x38,0x64,0x15,0x5d,
					0x44,0x19,0x0b,0x77,0x9c,0x9b,0x86,0x2a,
				},
				Time:                1308160164,
				NBits:               437461381,
				Nonce:               361059844,
			},
		},
	},

}

var testIndexDBFile uint32 = 2

var testFileIndex = &FileIndex{
	NBlocks:      5700,
	NSize:        134182330,
	NUndoSize:    16270661,
	NHeightFirst: 131079,
	NHeightLast:  136974,
	NTimeFirst:   1308160164,
	NTimeLast:    1311035890,
}

var testIndexDBTransactionHash = []byte{
	0xbd,0x0f,0x6a,0x30,0xd4,0x14,0x39,0x67,
	0xc3,0x84,0x51,0xaf,0x5c,0xae,0x14,0xb9,
	0x48,0xb7,0x78,0x55,0x6d,0x4a,0xf9,0x4a,
	0xf4,0x4c,0x46,0xf1,0xa8,0xfe,0xcd,0x5b,
}

var testIndexDBLastIndex uint32 = 131301


func NewTestIndexDB(t *testing.T) *IndexDB{
	path, err := filepath.Abs(testPath)
	if err != nil {
		t.Errorf("create path error: %s", err)
	}
	in, err := NewIndexDB(path)
	if err != nil {
		t.Fatalf("TestNewIndexDB error: %s", err)
	}
	return in
}

func TestIndexDB_Close(t *testing.T) {
	in := NewTestIndexDB(t)
	err := in.Close()
	if err != nil {
		t.Errorf("TestIndexDB_Close error: %s", err)
	}
}

func TestIndexDB_getBlockIndexByBlock(t *testing.T) {
	in := NewTestIndexDB(t)
	defer in.Close()
	for _, data  := range testIndexDBData {
		bi, err := in.getBlockIndexByBlock(data.hash)
		if err != nil {
			t.Errorf("TestIndexDB_getBlockIndexByBlock error: %s", err)
		}
		CompareBlockIndex(bi,data.index,t)
	}
}

func TestIndexDB_getFileIndex(t *testing.T) {
	in := NewTestIndexDB(t)
	defer in.Close()
	fi, err := in.getFileIndex(testIndexDBFile)
	if err != nil {
		t.Errorf("TestNewIndexDB_getFileIndex error: %s", err)
	}
	CompareFileIndex(fi, testFileIndex, t)
}

func TestIndexDB_getLastFileIndex(t *testing.T){
	in := NewTestIndexDB(t)
	defer in.Close()
	index , err :=in.getLastFileIndex()
	if err != nil {
		t.Errorf("TestIndexDB_getLastIndex error: %s", err)
	}
	CompareFileIndex(index, testFileIndex, t)

}