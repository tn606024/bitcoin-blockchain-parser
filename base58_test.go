package main

import (
	"bytes"
	"testing"
)

var TestBase58Data = []struct{
	enc []byte
	dec []byte
}{
	{
		enc: []byte("17otQedAV7CBuDkMPdCRPcryjNhTJnoxyY"),
		dec: []byte{
			0x00, 0x4a, 0xae, 0xcd, 0x4d, 0x5e, 0x62, 0x88,
			0xc1, 0x51, 0x84, 0x4d, 0xbe, 0x49, 0x6e, 0xa4,
			0xc6, 0x57, 0x4a, 0x90, 0xb5, 0x59, 0x85, 0x85,
			0xab,},
	},
	{
		enc: []byte("16wuE7Kmz817UQKYf2bLzHPvgVKxngRdQM"),
		dec:[]byte{
			0x00,0x41,0x3a,0xaf,0xdb,0x46,0xcb,0x6c,
			0xbf,0x69,0xc1,0x43,0x64,0xe4,0x2d,0x81,
			0x46,0xb0,0xac,0x3a,0x50,0xeb,0xcb,0x47,
			0x6a,
		},
	},
	{
		enc: []byte("133gKAE3sz4T3PGkw66iAgV7fbK3J9fPtu"),
		dec:[]byte{
			0x00,0x16,0x71,0xe6,0x80,0xd9,0x95,0xdc,
			0x70,0xb6,0x1a,0x86,0xd3,0xf8,0x37,0xda,
			0x70,0x5a,0xba,0x5a,0x03,0xd1,0xf0,0x16,
			0x6a,
		},
	},
}

func TestBase58Decode(t *testing.T) {
	for _, data := range TestBase58Data {
		dec := Base58Decode(data.enc)
		if bytes.Compare(dec, data.dec) != 0 {
			t.Errorf("decode result error is not correct, we got: %x, but answer is: %x",dec, data.dec)
		}
	}
}

func TestBase58Encode(t *testing.T) {
	for _, data := range TestBase58Data {
		enc := Base58Encode(data.dec)
		if bytes.Compare(enc, data.enc) != 0 {
			t.Errorf("decode result error is not correct, we got: %x, but answer is: %x",enc, data.enc)
		}
	}
}